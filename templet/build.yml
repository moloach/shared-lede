#
# Copyright (C) 2022-2023 hugcabbage <fengsongtianxia@gmail.com>
#
# This is free software, licensed under the MIT License.
#
# <https://github.com/hugcabbage/shared-lede>
#
name: xxxxxx

on:
  workflow_dispatch:
    inputs:
      record:
        description: 'input version description'
        required: false
        default: 'details: kernel bumped, application version updated'
        type: string
      release:
        description: 'upload firmware to release'
        required: false
        default: true
        type: boolean
      artifact:
        description: 'upload firmware to artifact'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  to-build:
    runs-on: ubuntu-latest
    env:
      SERIAL_NU: xxxxxx
      DEPLOY_DIR: xxxxxx
      EXTRA_STR: _some
    steps:

      - name: display initial disk space
        run: |
          df -h

      - name: checkout
        uses: actions/checkout@v4
        with:
          path: ${{ env.EXTRA_STR }}

      - name: prepare environments
        run: |
          sudo apt-get update
          sudo apt-get -y install gcc-multilib gettext libncurses5-dev
          sudo apt-get clean

      - name: clone sources
        run: |
          CLONE_SH=${{ env.EXTRA_STR }}/${DEPLOY_DIR}/${SERIAL_NU}.clone.sh
          chmod +x $CLONE_SH
          $CLONE_SH

      - name: update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: modify configuration
        run: |
          MODIFY_SH=${{ env.EXTRA_STR }}/${DEPLOY_DIR}/${SERIAL_NU}.modify.sh
          chmod +x $MODIFY_SH
          $MODIFY_SH

      - name: generate .config
        run: |
          DOT_CONFIG=${{ env.EXTRA_STR }}/${DEPLOY_DIR}/${SERIAL_NU}.config
          mv $DOT_CONFIG .config
          make defconfig

      - name: make download
        run: |
          make download -j8 || make download -j1 V=s

      - name: compile
        run: |
          make -j$(nproc) || make -j1 V=s

      - name: pick up files
        run: |
          mkdir -p _collected_firmware/packages
          rm -rf $(find bin/targets/ -type d -name 'packages')
          cp $(find bin/targets/ -type f) _collected_firmware
          cp $(find bin/packages/ -type f -name '*.ipk') _collected_firmware/packages
          cd _collected_firmware
          zip -r allfiles.zip *
          cd packages
          zip -r ../packages.zip *

      - name: read release text
        id: release-text
        if: inputs.release == true
        run: |
          cp ${{ env.EXTRA_STR }}/${DEPLOY_DIR}/${SERIAL_NU}.release.md release.tmp
          rt=$(head -n 1 release.tmp)
          rt="${rt#*# }"
          echo "RELEASE_TITLE=$rt" >> $GITHUB_OUTPUT
          rb=$(sed -n '3,$p' release.tmp)
          rb="${rb//'%'/'%25'}"
          rb="${rb//$'\n'/'%0A'}"
          rb="${rb//$'\r'/'%0D'}"
          echo "RELEASE_BODY=$rb" >> $GITHUB_OUTPUT

      - name: calculate tag version
        id: calculate-version
        if: inputs.release == true
        uses: hugcabbage/next-version@v1
        with:
          repo_path: ${{ env.EXTRA_STR }}

      - name: upload firmware to release
        id: to-release
        if: steps.release-text.conclusion == 'success'
        continue-on-error: true
        uses: svenstaro/upload-release-action@v2
        with:
          file: _collected_firmware/*
          tag: ${{ steps.calculate-version.outputs.version }}
          release_name: ${{ steps.calculate-version.outputs.version }} ${{ steps.release-text.outputs.RELEASE_TITLE }}
          overwrite: true
          prerelease: false
          body: |
            ${{ steps.release-text.outputs.RELEASE_BODY }}
            ${{ inputs.record }}
          file_glob: true

      - name: upload firmware to artifact
        if: inputs.artifact == true || steps.to-release.outcome != 'success'
        uses: actions/upload-artifact@v3
        with:
          name: collected_firmware
          path: |
            _collected_firmware/
            !_collected_firmware/*.zip

      - name: display finishing disk space 
        run: |
          df -h
          echo "----------------------------"
          du -h --max-depth=1
